//
//  MessagesViewController.swift
//  MTCMessenger
//
//  Created by Ortwin Gentz on 14.03.17.
//  Copyright Â© 2017 FutureTap. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
	
	@IBOutlet weak var messageView : MessageView!

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		if let talksTableViewController = segue.destination as? TalksTableViewController {
			talksTableViewController.pickerDelegate = self
		}
	}
}

extension MessagesViewController : TalkPickerDelegate {
	
	func talksTableViewController(_ controller: UIViewController, didSelect talk: Talk) {
		self.messageView.talk = talk
		self.view.insertSubview(self.messageView, at: 0)
		self.messageView.layoutIfNeeded()
		
		requestPresentationStyle(.compact)
		if let conversation = activeConversation {
			let format = UIGraphicsImageRendererFormat()
			format.opaque = true
			format.scale = 3
			let renderer = UIGraphicsImageRenderer(size: self.messageView.bounds.size, format: format)
			let image = renderer.image { ctx in
				self.messageView.drawHierarchy(in: self.messageView.bounds, afterScreenUpdates: true)
			}
			self.messageView.removeFromSuperview()
			
			let layout = MSMessageTemplateLayout()
			layout.image = image
			layout.caption = talk.time
			
			let timeFormatter = DateFormatter()
			timeFormatter.timeStyle = .none
			timeFormatter.dateFormat = "EEEE"
			layout.trailingCaption = timeFormatter.string(from: talk.startDate)
			
			layout.subcaption = talk.room
			
			let message = MSMessage(session: conversation.selectedMessage?.session ?? MSSession())
			message.url = talk.talkURL
			message.layout = layout
			
			conversation.insert(message) { error in
				if let error = error {
					print(error)
				}
			}
		}
	}
}
